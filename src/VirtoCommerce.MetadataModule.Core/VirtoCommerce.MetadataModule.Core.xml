<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VirtoCommerce.MetadataModule.Core</name>
    </assembly>
    <members>
        <member name="T:VirtoCommerce.MetadataModule.Core.Exceptions.IncompatibleTypesForProjectionOperationException">
            <summary>
            Incompatible projections exceptions
            </summary>
        </member>
        <member name="T:VirtoCommerce.MetadataModule.Core.Model.DetailInProjection">
            <summary>
            Detail projection in the aggregator projection
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.DetailInProjection.Projection">
            <summary>
            Projection, defined for detail model
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.DetailInProjection.Name">
            <summary>
            Name of the property which the projection defined for
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.DetailInProjection.Caption">
            <summary>
            Property caption
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.DetailInProjection.FormPath">
            <summary>
            Property form path
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.DetailInProjection.Order">
            <summary>
            Order of the property
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.DetailInProjection.LoadOnLoadAgregator">
            <summary>
            Should the detail objects be loaded together with aggregator or not
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.DetailInProjection.Visible">
            <summary>
            Define the property visible or not
            </summary>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Information.GetItemType(System.Type,System.String)">
            <summary>
            Discover the enumerable generic type parameter
            </summary>
            <param name="AgregatorType">Aggregator model type</param>
            <param name="DetailPropertyName">Property name of the aggregator type that points to detail collection</param>
            <returns></returns>
        </member>
        <member name="T:VirtoCommerce.MetadataModule.Core.Model.LookupType">
            <summary>
            Lookup types for linked objects
            </summary>
        </member>
        <member name="F:VirtoCommerce.MetadataModule.Core.Model.LookupType.Combo">
            <summary>
            Inplace combobox
            </summary>
        </member>
        <member name="F:VirtoCommerce.MetadataModule.Core.Model.LookupType.Standard">
            <summary>
            Some button opening the separate full list
            </summary>
        </member>
        <member name="F:VirtoCommerce.MetadataModule.Core.Model.LookupType.Custom">
            <summary>
            Custom (user defined) type
            </summary>
        </member>
        <member name="T:VirtoCommerce.MetadataModule.Core.Model.MasterInProjection">
            <summary>
            Master in the projection definition
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.MasterInProjection.Name">
            <summary>
            Master property name
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.MasterInProjection.CustomizationString">
            <summary>
            UI control additional customization info 
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.MasterInProjection.LookupType">
            <summary>
            Lookup type (how the lookup control should looking at all)
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.MasterInProjection.LookupProperty">
            <summary>
            A valuable property for user to show in the lookup UI-control
            </summary>
        </member>
        <member name="T:VirtoCommerce.MetadataModule.Core.Model.Projection">
            <summary>
            Projection definition
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.Projection.DefineClassType">
            <summary>
            The model class for which the projection defined for
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.Projection.Name">
            <summary>
            Name of the projection
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.Projection.ReadType">
            <summary>
            How the projection was created (notice)
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.Projection.Properties">
            <summary>
            Properties or fields of the model class, represented as the single value
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.Projection.Details">
            <summary>
            Details (instances, referenced by composition at the side with cardinality *)
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.Projection.Masters">
            <summary>
            Masters (instances, referenced by association at the side with cardinality 0..1 or 1)
            </summary>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.#ctor(System.Type,VirtoCommerce.MetadataModule.Core.Model.ReadType)">
            <summary>
            Create default projection (include all the fields).
            Useful for samples, etc... Big projections commonly is a bad practice, because so many data to store/transmit.
            </summary>
            <param name="ModelType">Type of the model class</param>
            <param name="readType">Default projection creation rule</param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.GetProjectionForMaster(System.String)">
            <summary>
            Return master-related projection branch
            </summary>
            <param name="master">Master field name</param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.GetMaster(System.String)">
            <summary>
            Get specific master in projection description
            </summary>
            <param name="masterName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.RemoveMaster(System.String)">
            <summary>
            Remove master from the projection
            </summary>
            <param name="masterName"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.GetDetail(System.String)">
            <summary>
            Return specific detail in projection name
            </summary>
            <param name="detailName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.RemoveDetail(System.String)">
            <summary>
            Remove detail from projection
            </summary>
            <param name="detailname"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.GetProperty(System.String)">
            <summary>
            Get specific property in projection description
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.CheckPropname(System.String)">
            <summary>
            Check if the property exists in projection
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.CheckPropname(System.String,System.Boolean)">
            <summary>
            Check if the property exists in projection
            </summary>
            <param name="propName"></param>
            <param name="checkDetails"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.RemoveProperty(System.String)">
            <summary>
            Remove property from the projection
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.AddDetailInProjection(System.String,VirtoCommerce.MetadataModule.Core.Model.Projection,System.Boolean)">
            <summary>
            Add detail to the projection
            </summary>
            <param name="detailname"></param>
            <param name="detailProjection"></param>
            <param name="loadOnLoadAgregator"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.AddDetailInProjection(System.String,VirtoCommerce.MetadataModule.Core.Model.Projection,System.Boolean,System.String,System.Boolean,System.String,System.String[])">
            <summary>
            Add detail to the projection
            </summary>
            <param name="detailname"></param>
            <param name="detailProjection"></param>
            <param name="loadOnLoadAgregator"></param>
            <param name="path"></param>
            <param name="visible"></param>
            <param name="caption"></param>
            <param name="aggregateFunctions"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.AddMasterInProjection(System.String,VirtoCommerce.MetadataModule.Core.Model.LookupType,System.String,System.String)">
            <summary>
            Add master to the projection
            </summary>
            <param name="masterName"></param>
            <param name="lookupType"></param>
            <param name="lookupcustomizationstring"></param>
            <param name="lookupProperty"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.AddMasterInProjection(System.String)">
            <summary>
            Add master to the projection
            </summary>
            <param name="masterName"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.AddProperties(System.String[])">
            <summary>
            Add properties to the projection
            </summary>
            <param name="propertyNames"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.AddProperty(System.String)">
            <summary>
            Add property to the projection
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.AddProperty(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add property to the projection
            </summary>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.AddProperty(System.String,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Add property to the projection
            </summary>
            <param name="propName"></param>
            <param name="propCaption"></param>
            <param name="visible"></param>
            <param name="propPath"></param>
            <param name="visible"></param>
            <param name="propPath"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.ToString">
            <summary>
            Human-readable view of the projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.ToString(System.Boolean)">
            <summary>
            Represent full projection 
            </summary>
            <param name="fullProjection"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.op_ExclusiveOr(VirtoCommerce.MetadataModule.Core.Model.Projection,VirtoCommerce.MetadataModule.Core.Model.Projection)">
            <summary>
            exclusive-OR
            </summary>
            <param name="firstProjection"></param>
            <param name="secondProjection"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.GetOrderedProperies(System.String[],System.String[],System.Collections.Generic.List{System.String}@)">
            <summary>
            List of the properties in order of property define in the projection
            </summary>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Model.Projection.GetPropertyIndex(System.String)">
            <summary>
            Get field index in a projection starting from 0
            </summary>
        </member>
        <member name="T:VirtoCommerce.MetadataModule.Core.Model.PropertyInProjection">
            <summary>
            Definition of the property in the projection
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.PropertyInProjection.Name">
            <summary>
            Property/field name
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.PropertyInProjection.Caption">
            <summary>
            Caption for the field in that projection
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.PropertyInProjection.Visible">
            <summary>
            Property/field visibility
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.PropertyInProjection.Order">
            <summary>
            Order of the property/field in the projection to strictly define the position (UI, as example)
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.PropertyInProjection.Format">
            <summary>
            Some formatting applied to the attribute value
            </summary>
        </member>
        <member name="P:VirtoCommerce.MetadataModule.Core.Model.PropertyInProjection.FormPath">
            <summary>
            Form control position/path
            </summary>
        </member>
        <member name="T:VirtoCommerce.MetadataModule.Core.Services.IMetadataService">
            <summary>
            An interface to a service allowing to define/consume model projections
            </summary>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Services.IMetadataService.AddProjection(VirtoCommerce.MetadataModule.Core.Model.Projection)">
            <summary>
            Add projection to the projections list
            </summary>
            <param name="projection"></param>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Services.IMetadataService.GetProjection(System.Type,System.String)">
            <summary>
            Get the projection for specific model type and projection name
            </summary>
            <param name="modelType"></param>
            <param name="projectionName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Services.IMetadataService.GetModels">
            <summary>
            Get all registered model types
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtoCommerce.MetadataModule.Core.Services.IMetadataService.GetProjections(System.Type)">
            <summary>
            Get all registered projections for specific model type
            </summary>
            <param name="modelType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
